/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package connecthub.frontend;


import static connecthub.backend.Newsfeed.groupManager;

import java.util.List;

import javax.swing.SwingUtilities;

import connecthub.backend.Admin;
import connecthub.backend.FriendManagement;
import connecthub.backend.FriendRequestNotification;
import connecthub.backend.Group;
import connecthub.backend.GroupAdditionNotification;
import connecthub.backend.GroupPostNotification;
import connecthub.backend.GroupRequestNotification;
import connecthub.backend.GroupRequestNotificationDatabase;
import connecthub.backend.GroupStatusNotification;
import connecthub.backend.Newsfeed;
import connecthub.backend.NotficationSystem;
import connecthub.backend.Notification;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.stage.Stage;

/**
 *
 * @author NEXT STORE
 */
public class NotificationFront extends javax.swing.JFrame {

    /**
     * Creates new form NotificationFront
     */
    private String userId;
    private FriendManagement friendManagement;
    public NotificationFront(String userId,FriendManagement friendManagement) {
        this.userId = userId;
        this.friendManagement = friendManagement;
        initComponents();
        setVisible(true);
        setLocationRelativeTo(null);
        loadNotifications();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }

     private void loadNotifications() {
        // Clear any existing items in the combo box
        NotificationsComboBox.removeAllItems();
       // NotificationsComboBox.addItem("Notifications");
       NotificationsComboBox.addItem(new PlaceholderNotification());
        List<Notification> notifications = Newsfeed.notficationSystem.getNotificationsForUser(userId);
        System.out.println(notifications);
        for (Notification notification : notifications) {
            NotificationsComboBox.addItem(notification);
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jMenu1 = new javax.swing.JMenu();
        NotificationsComboBox = new javax.swing.JComboBox<>();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

       // NotificationsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Notifications"}));
        NotificationsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NotificationsComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(NotificationsComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 402, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NotificationsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(356, Short.MAX_VALUE))
        );

        pack();
    }

    private void NotificationsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
         Object selectedItem = NotificationsComboBox.getSelectedItem();
         if (selectedItem == null) {
             System.out.println("Selected item is null");
             return;
         }
         if (!(selectedItem instanceof Notification)) {
             System.out.println("Selected item is not a Notification: " + selectedItem.getClass().getName());
             return;
         }
    if (selectedItem instanceof Notification) {
        System.out.println("Notification selected");
        Notification selectedNotification = (Notification) selectedItem;
        
        // Determine the type of the notification
        
        if (selectedNotification instanceof FriendRequestNotification) {
              new FriendrequestWindow(friendManagement,selectedNotification).setVisible(true);
          //  setVisible(false);
            
            
        } else if (selectedNotification instanceof GroupPostNotification) {
            SwingUtilities.invokeLater(()->{
                new GroupStatusWindow(userId,selectedNotification.getId2()).setVisible(true);
            });
            
        } else if (selectedNotification instanceof GroupStatusNotification) {
            SwingUtilities.invokeLater(()->{
                new GroupStatusWindow(userId,selectedNotification.getId2()).setVisible(true);
            });
            
        } else if (selectedNotification instanceof GroupAdditionNotification) {
            SwingUtilities.invokeLater(()->{
                dispose();
                Platform.runLater(()->{
                    Stage stage = App.getPrimaryStage();
                    Scene previousScene = stage.getScene();
                    String groupId = selectedNotification.getId2();
                    Group group = Newsfeed.groupManager.searchGroupById(groupId);
                    Admin admin = group.getAdmin(userId);
                    if(group.getPrimaryAdmin().getUserId().equals(userId)) {
                        PrimaryAdminGroupProfile.show(group,group.getPrimaryAdmin(),stage,previousScene);
                    }
                    else if(admin!=null){
                        AdminGroupProfile.show(group,admin,stage,previousScene);
                    }
                    else {
                        UserGroupProfile.show(group,App.userAccountManager.searchById(userId),stage,previousScene);
                    }
                });
            });

        }
        else if(selectedNotification instanceof GroupRequestNotification){
            dispose();
            Platform.runLater(()->{
                GroupRequestNotification notification = Newsfeed.notficationSystem.searchForGroupRequestNotification(userId, selectedNotification.getId2());
                GroupRequestWindow.show(notification.getSenderId(),selectedNotification.getId2());
            });
        }
    }
    }

    private javax.swing.JComboBox<Notification> NotificationsComboBox;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
class PlaceholderNotification extends Notification {
    @Override
    public String toString() {
        return "Notifications";
    }
}
